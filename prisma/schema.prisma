datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model User {
  id                String              @id @default(uuid())   // Unikalny identyfikator użytkownika
  name              String?                                // Imię i nazwisko użytkownika (opcjonalne)
  email             String              @unique             // Unikalny email użytkownika
  emailVerified     DateTime?                              // Data weryfikacji emaila
  password          String?                                // Hasło (przechowywane jako hash)
  image             String?                                // URL do zdjęcia profilowego (opcjonalne)

  // Relacje
  roles             UserRoleAssignment[]                   // Relacja wiele-do-wielu do ról
  accounts          Account[]                              // Konta powiązane z użytkownikiem
  sessions          Session[]                              // Sesje uwierzytelnienia użytkownika
  purchases         Purchase[]                             // Zakupy dokonane przez użytkownika
  completedLessons  Lesson[]  // Lekcje ukończone przez użytkownika

  // Dodatkowe pola
  address           String?                                // Adres użytkownika (opcjonalny)
  phoneNumber       String?                                // Numer telefonu (opcjonalny)
  newsletterOptIn   Boolean            @default(false)     // Czy użytkownik zgodził się na newsletter
  isAdmin           Boolean            @default(false)     // Flaga administratora

  // Automatyczne pola czasu
  createdAt         DateTime           @default(now())     // Data utworzenia użytkownika
  updatedAt         DateTime           @updatedAt          // Data ostatniej aktualizacji

  // Indeksy
  @@index([email])                                       // Indeks na email dla szybkiego wyszukiwania
}


model UserRoleAssignment {
  id     String       @id @default(uuid())
  user   User      @relation(fields: [userId], references: [id])
  userId String
  role   UserRole  // Przechowujemy role bezpośrednio jako enum

  @@unique([userId, role]) // Zapewnia, że użytkownik nie może mieć tej samej roli więcej niż raz
}

enum UserRole {
  Admin
  Teacher
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Course {
  id          String  @id @default(uuid())
  ownerId     String?

  title       String  @db.Text
  slug        String?  @unique
  description String? @db.Text
  imageUrl    String? @db.Text
  price       Int?
  currency    String  @default("PLN")       // Waluta ceny kursu
  published   Boolean @default(false)

  // Kategoria, poziom i przedmiot kursu
  category    Category?
  level       Level?
  subject     Subject?

  chapters    Chapter[]
  lessons     Lesson[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category])
}

model Chapter {
  id  String  @id @default(uuid())
  title String
  courseId String
  course  Course  @relation(fields: [courseId], references: [id])
  order Int
  subchapters SubChapter[] 
  lessons Lesson[]  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model SubChapter {
  id  String  @id @default(uuid())
  title String
  chapterId String
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  order Int
  lessons Lesson[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Lesson {
  id        String      @id @default(uuid())
  title     String
  courseId  String
  course  Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  chapterId String?
  chapter Chapter?  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  subChapterId  String?
  subChapter  SubChapter? @relation(fields: [subChapterId], references: [id], onDelete: Cascade)
  type      LessonType
  order     Int
  content   String?     @db.Text
  media     Json?
  ImageURL String?
  published Boolean     @default(false)
  free      Boolean     @default(false)
  attachments Attachment[]
  completedByUsers User[] //@relation("CompletedLessons")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Category {
  Exam
  Course
}

enum Subject {
  Mathematics
}

enum Level {
  ElementarySchool
  GeneralHighSchool
  AdvancedHighSchool
  University
}

model Attachment {
  id   String @id @default(uuid())
  name String
  url  String @db.Text

  lessonId String?
  lesson   Lesson? @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum LessonType {
//  Text
  Video
//  Audio
//  Subchapter
}


model Purchase {
  id                String             @id @default(uuid()) // Unikalny identyfikator zakupu
  stripeSessionId   String             @unique              // ID sesji Stripe
  userId            String            // Powiązanie z użytkownikiem (jeśli istnieje)
  user              User               @relation(fields: [userId], references: [id])
  totalAmount       Int                // Całkowita kwota zakupu (w groszach)
  currency          String             @default("PLN")     // Waluta (np. PLN, USD)
  status            PaymentStatus      @default(Pending)   // Status płatności (PENDING, PAID, FAILED, REFUNDED)
  purchasedProducts OrderItem[] // Powiązane produkty

  createdAt         DateTime           @default(now())     // Data utworzenia
  updatedAt         DateTime           @updatedAt          // Data ostatniej aktualizacji

  @@index([stripeSessionId]) // Indeks dla Stripe
  @@index([userId])          // Indeks na userId dla szybszych zapytań
}

model OrderItem {
  id             String       @id @default(uuid())        // Unikalny identyfikator zakupu produktu
  productId      String       // Identyfikator produktu (kurs, sesja, itd.)
  productType    ProductType  // Typ produktu (np. COURSE, SESSION)
  userId         String       // ID użytkownika przypisanego do tego produktu
  ownerId        String       // ID właściciela zakupu (może być inny niż userId w przypadku prezentów)
  price          Int          // Cena produktu w momencie zakupu (w groszach)
  status         ProductStatus @default(Active)           // Status produktu (ACTIVE, USED, RETURNED)
  assignedAt     DateTime?    // Data przypisania produktu użytkownikowi
  usedAt         DateTime?    // Data wykorzystania (np. sesji)
  createdAt      DateTime     @default(now())             // Data utworzenia
  updatedAt      DateTime     @updatedAt                  // Data ostatniej aktualizacji

  // Relacja do zakupu
  purchase       Purchase?     @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  purchaseId     String?       // Pole powiązane z modelem Purchase

  @@index([purchaseId])
  @@index([userId])
  @@index([ownerId]) // Indeksowanie właściciela dla szybszych zapytań
}

enum PaymentStatus {
  Pending    // Oczekuje na płatność
  Paid       // Opłacone
  Failed     // Niepowodzenie płatności
  Refunded   // Zwrócono pieniądze
}

model StripeCustomer {
  id               String @id @default(uuid())
  userId           String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ProductType {
  Course
}

enum ProductStatus {
  Active
  Used
  Returned
}
