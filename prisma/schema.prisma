datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model User {
  id            String              @id @default(uuid())
  name          String?
  email         String              @unique
  emailVerified DateTime?
  password      String
  image         String?
  roles         UserRoleAssignment[] // Relacja wiele-do-wielu do ról
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserRoleAssignment {
  id     String       @id @default(uuid())
  user   User      @relation(fields: [userId], references: [id])
  userId String
  role   UserRole  // Przechowujemy role bezpośrednio jako enum

  @@unique([userId, role]) // Zapewnia, że użytkownik nie może mieć tej samej roli więcej niż raz
}

enum UserRole {
  Admin
  Teacher
}

model UserProgress {
  id     String @id @default(uuid())
  userId String
  lessonId String
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  completed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
  @@index([lessonId])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Course {
  id          String  @id @default(uuid())
  ownerId     String
  title       String  @db.Text
  slug        String  @unique
  description String? @db.Text
  imageUrl    String? @db.Text
  price       Float?
  published Boolean @default(false)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  levelId String?
  level   Level?  @relation(fields: [levelId], references: [id])

  attachments Attachment[]
  chapters    Chapter[]
  purchases   Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Level {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Attachment {
  id   String @id @default(uuid())
  name String
  url  String @db.Text

  courseId String?
  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)

  lessonId String?
  lesson   Lesson? @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chapter {
  id       String @id @default(uuid())
  title    String
  slug     String?
  published Boolean @default(false)

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  order   Int
  lessons Lesson[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([courseId, slug], map: "unique_chapter_slug_per_course")
}

model Lesson {
  id        String      @id @default(uuid())
  title     String
  slug      String?
  type      LessonType
  order     Int
  content   String?     @db.Text

  video     VideoLesson? 
  audioUrl  String?
  published Boolean     @default(false)
  free      Boolean     @default(false)

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  attachments Attachment[]

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([chapterId, slug], map: "unique_lesson_slug_per_chapter")
}

model VideoLesson {
  id       String      @id @default(uuid())
  url      String
  name     String?
  duration  Float?     // Czas trwania wideo w sekundach, opcjonalne pole
  source   VideoSource // Źródło wideo (np. enum VideoSource)

  lesson   Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId String     @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum VideoSource {
  youtube
  internal
}

enum LessonType {
  Text
  Video
  Audio
  Subchapter
}

model BussinesInfo {
  id        String  @id @default(uuid())
  name      String
  address   String
  vatNumber String?
  email     String?
  phone     String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  purchases Purchase[]
}

model Purchase {
  id     String @id @default(uuid())
  
  userId String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  // Fields for Bussiness info
  bussinessInfoId String
  bussinessInfo   BussinesInfo  @relation(fields: [bussinessInfoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id               String @id @default(uuid())
  userId           String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
